{"ast":null,"code":"import { bookSeats } from '../services/api';\nconst handleRazorpayPayment = async payload => {\n  try {\n    // Step 1: Create Razorpay order from backend\n    const orderRes = await fetch('http://localhost:5000/api/payments/create-order', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: payload.amount\n      })\n    });\n    const {\n      orderId\n    } = await orderRes.json();\n\n    // Step 2: Configure Razorpay options\n    const options = {\n      key: 'rzp_test_RIn3HX6YPDL3Nf',\n      amount: payload.amount,\n      currency: 'INR',\n      name: 'ShowSnap',\n      description: 'Movie Ticket Booking',\n      order_id: orderId,\n      handler: async function (response) {\n        try {\n          var _bookingRes$data;\n          // Step 3: Verify payment with backend\n          const verifyRes = await fetch('http://localhost:5000/api/payments/verify', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              razorpay_order_id: response.razorpay_order_id,\n              razorpay_payment_id: response.razorpay_payment_id,\n              razorpay_signature: response.razorpay_signature\n            })\n          });\n          const result = await verifyRes.json();\n          if (!result.success) {\n            alert('❌ Payment verification failed. Booking not completed.');\n            return;\n          }\n\n          // Step 4: Proceed with booking\n          const token = localStorage.getItem('token');\n          const user = JSON.parse(localStorage.getItem('user'));\n          const bookingRes = await bookSeats(payload, token);\n          const bookingId = bookingRes === null || bookingRes === void 0 ? void 0 : (_bookingRes$data = bookingRes.data) === null || _bookingRes$data === void 0 ? void 0 : _bookingRes$data._id;\n\n          // Step 5: Send confirmation email\n          await fetch('http://localhost:5000/api/email/booking-confirmation', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              booking: payload,\n              userEmail: user.email\n            })\n          });\n\n          // Step 6: Redirect to summary page\n          if (bookingId) {\n            window.location.href = `/my-bookings/${bookingId}`;\n          }\n        } catch (err) {\n          console.error('❌ Error during payment handling:', err);\n          alert('Something went wrong during booking.');\n        }\n      },\n      prefill: {\n        name: 'Harshal',\n        email: 'harshal@example.com',\n        contact: '9999999999'\n      },\n      theme: {\n        color: '#F37254'\n      }\n    };\n\n    // Step 7: Open Razorpay modal\n    const rzp = new window.Razorpay(options);\n    rzp.open();\n  } catch (err) {\n    console.error('❌ Error initiating Razorpay:', err);\n    alert('Unable to initiate payment. Please try again.');\n  }\n};\nexport default handleRazorpayPayment;","map":{"version":3,"names":["bookSeats","handleRazorpayPayment","payload","orderRes","fetch","method","headers","body","JSON","stringify","amount","orderId","json","options","key","currency","name","description","order_id","handler","response","_bookingRes$data","verifyRes","razorpay_order_id","razorpay_payment_id","razorpay_signature","result","success","alert","token","localStorage","getItem","user","parse","bookingRes","bookingId","data","_id","booking","userEmail","email","window","location","href","err","console","error","prefill","contact","theme","color","rzp","Razorpay","open"],"sources":["C:/Users/Harshal/Desktop/showsnap/frontend/src/components/RazorpayCheckout.js"],"sourcesContent":["import { bookSeats } from '../services/api';\r\n\r\nconst handleRazorpayPayment = async (payload) => {\r\n  try {\r\n    // Step 1: Create Razorpay order from backend\r\n    const orderRes = await fetch('http://localhost:5000/api/payments/create-order', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ amount: payload.amount })\r\n    });\r\n\r\n    const { orderId } = await orderRes.json();\r\n\r\n    // Step 2: Configure Razorpay options\r\n    const options = {\r\n      key: 'rzp_test_RIn3HX6YPDL3Nf',\r\n      amount: payload.amount,\r\n      currency: 'INR',\r\n      name: 'ShowSnap',\r\n      description: 'Movie Ticket Booking',\r\n      order_id: orderId,\r\n      handler: async function (response) {\r\n        try {\r\n          // Step 3: Verify payment with backend\r\n          const verifyRes = await fetch('http://localhost:5000/api/payments/verify', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n              razorpay_order_id: response.razorpay_order_id,\r\n              razorpay_payment_id: response.razorpay_payment_id,\r\n              razorpay_signature: response.razorpay_signature\r\n            })\r\n          });\r\n\r\n          const result = await verifyRes.json();\r\n\r\n          if (!result.success) {\r\n            alert('❌ Payment verification failed. Booking not completed.');\r\n            return;\r\n          }\r\n\r\n          // Step 4: Proceed with booking\r\n          const token = localStorage.getItem('token');\r\n          const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n          const bookingRes = await bookSeats(payload, token);\r\n          const bookingId = bookingRes?.data?._id;\r\n\r\n          // Step 5: Send confirmation email\r\n          await fetch('http://localhost:5000/api/email/booking-confirmation', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n              booking: payload,\r\n              userEmail: user.email\r\n            })\r\n          });\r\n\r\n          // Step 6: Redirect to summary page\r\n          if (bookingId) {\r\n            window.location.href = `/my-bookings/${bookingId}`;\r\n          }\r\n        } catch (err) {\r\n          console.error('❌ Error during payment handling:', err);\r\n          alert('Something went wrong during booking.');\r\n        }\r\n      },\r\n      prefill: {\r\n        name: 'Harshal',\r\n        email: 'harshal@example.com',\r\n        contact: '9999999999'\r\n      },\r\n      theme: {\r\n        color: '#F37254'\r\n      }\r\n    };\r\n\r\n    // Step 7: Open Razorpay modal\r\n    const rzp = new window.Razorpay(options);\r\n    rzp.open();\r\n  } catch (err) {\r\n    console.error('❌ Error initiating Razorpay:', err);\r\n    alert('Unable to initiate payment. Please try again.');\r\n  }\r\n};\r\n\r\nexport default handleRazorpayPayment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}