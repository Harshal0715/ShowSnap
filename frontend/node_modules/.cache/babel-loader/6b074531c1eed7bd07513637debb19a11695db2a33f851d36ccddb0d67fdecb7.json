{"ast":null,"code":"import { bookSeats } from '../services/api';\nconst handleRazorpayPayment = async payload => {\n  try {\n    var _payload$seats, _payload$theater, _payload$theater2;\n    const token = localStorage.getItem('token');\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!token || !user) {\n      alert('User not authenticated. Please log in again.');\n      return;\n    }\n\n    // ✅ Validate payload before proceeding\n    if (!payload || !payload.amount || payload.amount <= 0 || !payload.movieId || !payload.userId || !((_payload$seats = payload.seats) !== null && _payload$seats !== void 0 && _payload$seats.length) || !((_payload$theater = payload.theater) !== null && _payload$theater !== void 0 && _payload$theater.name) || !((_payload$theater2 = payload.theater) !== null && _payload$theater2 !== void 0 && _payload$theater2.location) || !payload.showtimeDate) {\n      alert('Incomplete booking details. Please select showtime and seats before proceeding.');\n      return;\n    }\n\n    // Step 1: Create Razorpay order from backend\n    const orderRes = await fetch('http://localhost:5000/api/payments/create-order', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        amount: payload.amount\n      })\n    });\n    const {\n      orderId\n    } = await orderRes.json();\n    if (!orderId) {\n      alert('Failed to create payment order.');\n      return;\n    }\n\n    // Step 2: Configure Razorpay options\n    const options = {\n      key: 'rzp_test_RIn3HX6YPDL3Nf',\n      amount: payload.amount,\n      currency: 'INR',\n      name: 'ShowSnap',\n      description: 'Movie Ticket Booking',\n      order_id: orderId,\n      handler: async function (response) {\n        try {\n          var _bookingRes$data;\n          if (!response.razorpay_order_id || !response.razorpay_payment_id || !response.razorpay_signature) {\n            alert('Incomplete payment response.');\n            return;\n          }\n\n          // Step 3: Verify payment with backend\n          const verifyRes = await fetch('http://localhost:5000/api/payments/verify', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify({\n              razorpay_order_id: response.razorpay_order_id,\n              razorpay_payment_id: response.razorpay_payment_id,\n              razorpay_signature: response.razorpay_signature,\n              movieId: payload.movieId,\n              userId: payload.userId,\n              seats: payload.seats,\n              theater: payload.theater,\n              showtimeDate: payload.showtimeDate\n            })\n          });\n          const result = await verifyRes.json();\n          if (!verifyRes.ok || !result.success) {\n            alert(result.error || '❌ Payment verification failed. Booking not completed.');\n            return;\n          }\n\n          // Step 4: Proceed with booking\n          const bookingRes = await bookSeats(payload, token);\n          const bookingId = bookingRes === null || bookingRes === void 0 ? void 0 : (_bookingRes$data = bookingRes.data) === null || _bookingRes$data === void 0 ? void 0 : _bookingRes$data._id;\n\n          // Step 5: Send confirmation email\n          await fetch('http://localhost:5000/api/email/booking-confirmation', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify({\n              booking: payload,\n              userEmail: user.email\n            })\n          });\n\n          // Step 6: Redirect to summary page\n          if (bookingId) {\n            window.location.href = `/my-bookings/${bookingId}`;\n          }\n        } catch (err) {\n          console.error('❌ Error during payment handling:', err);\n          alert('Something went wrong during booking.');\n        }\n      },\n      prefill: {\n        name: user.name || 'Guest',\n        email: user.email || 'guest@example.com',\n        contact: user.contact || '9999999999'\n      },\n      theme: {\n        color: '#F37254'\n      }\n    };\n\n    // Step 7: Open Razorpay modal\n    const rzp = new window.Razorpay(options);\n    rzp.open();\n  } catch (err) {\n    console.error('❌ Error initiating Razorpay:', err);\n    alert('Unable to initiate payment. Please try again.');\n  }\n};\nexport default handleRazorpayPayment;","map":{"version":3,"names":["bookSeats","handleRazorpayPayment","payload","_payload$seats","_payload$theater","_payload$theater2","token","localStorage","getItem","user","JSON","parse","alert","amount","movieId","userId","seats","length","theater","name","location","showtimeDate","orderRes","fetch","method","headers","Authorization","body","stringify","orderId","json","options","key","currency","description","order_id","handler","response","_bookingRes$data","razorpay_order_id","razorpay_payment_id","razorpay_signature","verifyRes","result","ok","success","error","bookingRes","bookingId","data","_id","booking","userEmail","email","window","href","err","console","prefill","contact","theme","color","rzp","Razorpay","open"],"sources":["C:/Users/Harshal/Desktop/showsnap/frontend/src/components/RazorpayCheckout.js"],"sourcesContent":["import { bookSeats } from '../services/api';\r\n\r\nconst handleRazorpayPayment = async (payload) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    if (!token || !user) {\r\n      alert('User not authenticated. Please log in again.');\r\n      return;\r\n    }\r\n\r\n    // ✅ Validate payload before proceeding\r\n    if (\r\n      !payload ||\r\n      !payload.amount ||\r\n      payload.amount <= 0 ||\r\n      !payload.movieId ||\r\n      !payload.userId ||\r\n      !payload.seats?.length ||\r\n      !payload.theater?.name ||\r\n      !payload.theater?.location ||\r\n      !payload.showtimeDate\r\n    ) {\r\n      alert('Incomplete booking details. Please select showtime and seats before proceeding.');\r\n      return;\r\n    }\r\n\r\n    // Step 1: Create Razorpay order from backend\r\n    const orderRes = await fetch('http://localhost:5000/api/payments/create-order', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({ amount: payload.amount })\r\n    });\r\n\r\n    const { orderId } = await orderRes.json();\r\n\r\n    if (!orderId) {\r\n      alert('Failed to create payment order.');\r\n      return;\r\n    }\r\n\r\n    // Step 2: Configure Razorpay options\r\n    const options = {\r\n      key: 'rzp_test_RIn3HX6YPDL3Nf',\r\n      amount: payload.amount,\r\n      currency: 'INR',\r\n      name: 'ShowSnap',\r\n      description: 'Movie Ticket Booking',\r\n      order_id: orderId,\r\n      handler: async function (response) {\r\n        try {\r\n          if (\r\n            !response.razorpay_order_id ||\r\n            !response.razorpay_payment_id ||\r\n            !response.razorpay_signature\r\n          ) {\r\n            alert('Incomplete payment response.');\r\n            return;\r\n          }\r\n\r\n          // Step 3: Verify payment with backend\r\n          const verifyRes = await fetch('http://localhost:5000/api/payments/verify', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({\r\n              razorpay_order_id: response.razorpay_order_id,\r\n              razorpay_payment_id: response.razorpay_payment_id,\r\n              razorpay_signature: response.razorpay_signature,\r\n              movieId: payload.movieId,\r\n              userId: payload.userId,\r\n              seats: payload.seats,\r\n              theater: payload.theater,\r\n              showtimeDate: payload.showtimeDate\r\n            })\r\n          });\r\n\r\n          const result = await verifyRes.json();\r\n\r\n          if (!verifyRes.ok || !result.success) {\r\n            alert(result.error || '❌ Payment verification failed. Booking not completed.');\r\n            return;\r\n          }\r\n\r\n          // Step 4: Proceed with booking\r\n          const bookingRes = await bookSeats(payload, token);\r\n          const bookingId = bookingRes?.data?._id;\r\n\r\n          // Step 5: Send confirmation email\r\n          await fetch('http://localhost:5000/api/email/booking-confirmation', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({\r\n              booking: payload,\r\n              userEmail: user.email\r\n            })\r\n          });\r\n\r\n          // Step 6: Redirect to summary page\r\n          if (bookingId) {\r\n            window.location.href = `/my-bookings/${bookingId}`;\r\n          }\r\n        } catch (err) {\r\n          console.error('❌ Error during payment handling:', err);\r\n          alert('Something went wrong during booking.');\r\n        }\r\n      },\r\n      prefill: {\r\n        name: user.name || 'Guest',\r\n        email: user.email || 'guest@example.com',\r\n        contact: user.contact || '9999999999'\r\n      },\r\n      theme: {\r\n        color: '#F37254'\r\n      }\r\n    };\r\n\r\n    // Step 7: Open Razorpay modal\r\n    const rzp = new window.Razorpay(options);\r\n    rzp.open();\r\n  } catch (err) {\r\n    console.error('❌ Error initiating Razorpay:', err);\r\n    alert('Unable to initiate payment. Please try again.');\r\n  }\r\n};\r\n\r\nexport default handleRazorpayPayment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}