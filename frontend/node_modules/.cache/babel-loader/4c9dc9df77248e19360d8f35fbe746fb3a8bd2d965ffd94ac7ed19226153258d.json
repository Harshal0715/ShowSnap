{"ast":null,"code":"// razorpayCheckout.js\nimport { bookSeats } from '../services/api';\nimport toast from 'react-hot-toast';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst RAZORPAY_KEY = process.env.REACT_APP_RAZORPAY_KEY || 'rzp_test_RIn3HX6YPDL3Nf';\n\n// Helper for API calls with token\nconst apiFetch = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const res = await fetch(`${API_URL}${endpoint}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n      ...options.headers\n    },\n    ...options\n  });\n  return res.json();\n};\nconst handleRazorpayPayment = async (payload, setLoading) => {\n  var _payload$seats, _payload$theater, _payload$theater2;\n  const token = localStorage.getItem('token');\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (!token || !user) {\n    toast.error('User not authenticated. Please log in.');\n    return;\n  }\n  if (!payload || !payload.amount || payload.amount <= 0 || !payload.movieId || !payload.userId || !((_payload$seats = payload.seats) !== null && _payload$seats !== void 0 && _payload$seats.length) || !((_payload$theater = payload.theater) !== null && _payload$theater !== void 0 && _payload$theater.name) || !((_payload$theater2 = payload.theater) !== null && _payload$theater2 !== void 0 && _payload$theater2.location) || !payload.showtimeDate) {\n    toast.error('Incomplete booking details. Please select showtime and seats.');\n    return;\n  }\n  const formattedDate = new Date(payload.showtimeDate).toISOString();\n  try {\n    setLoading === null || setLoading === void 0 ? void 0 : setLoading(true);\n\n    // 1️⃣ Create Razorpay order\n    const {\n      orderId,\n      error: orderError\n    } = await apiFetch('/api/payments/create-order', {\n      method: 'POST',\n      body: JSON.stringify({\n        amount: payload.amount\n      })\n    });\n    if (orderError || !orderId) {\n      toast.error('Failed to create payment order.');\n      setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n      return;\n    }\n    if (!window.Razorpay) {\n      toast.error('Razorpay SDK not loaded. Please refresh.');\n      setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n      return;\n    }\n\n    // 2️⃣ Razorpay payment options\n    const options = {\n      key: RAZORPAY_KEY,\n      amount: payload.amount,\n      currency: 'INR',\n      name: 'ShowSnap',\n      description: 'Movie Ticket Booking',\n      order_id: orderId,\n      handler: async response => {\n        try {\n          var _bookingRes$data;\n          const {\n            razorpay_order_id,\n            razorpay_payment_id,\n            razorpay_signature\n          } = response;\n          if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\n            toast.error('Incomplete payment response.');\n            setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n            return;\n          }\n\n          // 3️⃣ Verify payment on server\n          const verifyRes = await apiFetch('/api/payments/verify', {\n            method: 'POST',\n            body: JSON.stringify({\n              razorpay_order_id,\n              razorpay_payment_id,\n              razorpay_signature,\n              movieId: payload.movieId,\n              userId: payload.userId,\n              seats: payload.seats,\n              theater: payload.theater,\n              showtimeDate: formattedDate\n            })\n          });\n          if (!verifyRes.success) {\n            toast.error(verifyRes.error || 'Payment verification failed.');\n            setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n            return;\n          }\n\n          // 4️⃣ Book seats in DB\n          const bookingRes = await bookSeats(payload, token);\n          const bookingId = bookingRes === null || bookingRes === void 0 ? void 0 : (_bookingRes$data = bookingRes.data) === null || _bookingRes$data === void 0 ? void 0 : _bookingRes$data._id;\n          if (!bookingId) {\n            toast.error('Booking failed. Please try again.');\n            setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n            return;\n          }\n\n          // 5️⃣ Send confirmation email\n          try {\n            await apiFetch('/api/email/booking-confirmation', {\n              method: 'POST',\n              body: JSON.stringify({\n                booking: payload,\n                userEmail: user.email\n              })\n            });\n          } catch (emailErr) {\n            console.warn('Email not sent:', emailErr.message);\n          }\n          toast.success('Booking successful!');\n          window.location.href = `/my-bookings/${bookingId}`;\n        } catch (err) {\n          console.error('Payment handler error:', err);\n          toast.error('Something went wrong during booking.');\n        } finally {\n          setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n        }\n      },\n      prefill: {\n        name: user.name || 'Guest',\n        email: user.email || 'guest@example.com',\n        contact: user.contact || '9999999999'\n      },\n      theme: {\n        color: '#F37254'\n      }\n    };\n    new window.Razorpay(options).open();\n  } catch (err) {\n    console.error('Error initiating Razorpay:', err);\n    toast.error('Unable to initiate payment. Please try again.');\n    setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n  }\n};\nexport default handleRazorpayPayment;","map":{"version":3,"names":["bookSeats","toast","API_URL","process","env","REACT_APP_API_URL","RAZORPAY_KEY","REACT_APP_RAZORPAY_KEY","apiFetch","endpoint","options","token","localStorage","getItem","res","fetch","headers","Authorization","json","handleRazorpayPayment","payload","setLoading","_payload$seats","_payload$theater","_payload$theater2","user","JSON","parse","error","amount","movieId","userId","seats","length","theater","name","location","showtimeDate","formattedDate","Date","toISOString","orderId","orderError","method","body","stringify","window","Razorpay","key","currency","description","order_id","handler","response","_bookingRes$data","razorpay_order_id","razorpay_payment_id","razorpay_signature","verifyRes","success","bookingRes","bookingId","data","_id","booking","userEmail","email","emailErr","console","warn","message","href","err","prefill","contact","theme","color","open"],"sources":["C:/Users/Harshal/Desktop/showsnap/frontend/src/components/RazorpayCheckout.js"],"sourcesContent":["// razorpayCheckout.js\r\nimport { bookSeats } from '../services/api';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\nconst RAZORPAY_KEY = process.env.REACT_APP_RAZORPAY_KEY || 'rzp_test_RIn3HX6YPDL3Nf';\r\n\r\n// Helper for API calls with token\r\nconst apiFetch = async (endpoint, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n  const res = await fetch(`${API_URL}${endpoint}`, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  });\r\n  return res.json();\r\n};\r\n\r\nconst handleRazorpayPayment = async (payload, setLoading) => {\r\n  const token = localStorage.getItem('token');\r\n  const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n  if (!token || !user) {\r\n    toast.error('User not authenticated. Please log in.');\r\n    return;\r\n  }\r\n\r\n  if (\r\n    !payload ||\r\n    !payload.amount ||\r\n    payload.amount <= 0 ||\r\n    !payload.movieId ||\r\n    !payload.userId ||\r\n    !payload.seats?.length ||\r\n    !payload.theater?.name ||\r\n    !payload.theater?.location ||\r\n    !payload.showtimeDate\r\n  ) {\r\n    toast.error('Incomplete booking details. Please select showtime and seats.');\r\n    return;\r\n  }\r\n\r\n  const formattedDate = new Date(payload.showtimeDate).toISOString();\r\n\r\n  try {\r\n    setLoading?.(true);\r\n\r\n    // 1️⃣ Create Razorpay order\r\n    const { orderId, error: orderError } = await apiFetch('/api/payments/create-order', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ amount: payload.amount }),\r\n    });\r\n\r\n    if (orderError || !orderId) {\r\n      toast.error('Failed to create payment order.');\r\n      setLoading?.(false);\r\n      return;\r\n    }\r\n\r\n    if (!window.Razorpay) {\r\n      toast.error('Razorpay SDK not loaded. Please refresh.');\r\n      setLoading?.(false);\r\n      return;\r\n    }\r\n\r\n    // 2️⃣ Razorpay payment options\r\n    const options = {\r\n      key: RAZORPAY_KEY,\r\n      amount: payload.amount,\r\n      currency: 'INR',\r\n      name: 'ShowSnap',\r\n      description: 'Movie Ticket Booking',\r\n      order_id: orderId,\r\n      handler: async (response) => {\r\n        try {\r\n          const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;\r\n          if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\r\n            toast.error('Incomplete payment response.');\r\n            setLoading?.(false);\r\n            return;\r\n          }\r\n\r\n          // 3️⃣ Verify payment on server\r\n          const verifyRes = await apiFetch('/api/payments/verify', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              razorpay_order_id,\r\n              razorpay_payment_id,\r\n              razorpay_signature,\r\n              movieId: payload.movieId,\r\n              userId: payload.userId,\r\n              seats: payload.seats,\r\n              theater: payload.theater,\r\n              showtimeDate: formattedDate,\r\n            }),\r\n          });\r\n\r\n          if (!verifyRes.success) {\r\n            toast.error(verifyRes.error || 'Payment verification failed.');\r\n            setLoading?.(false);\r\n            return;\r\n          }\r\n\r\n          // 4️⃣ Book seats in DB\r\n          const bookingRes = await bookSeats(payload, token);\r\n          const bookingId = bookingRes?.data?._id;\r\n          if (!bookingId) {\r\n            toast.error('Booking failed. Please try again.');\r\n            setLoading?.(false);\r\n            return;\r\n          }\r\n\r\n          // 5️⃣ Send confirmation email\r\n          try {\r\n            await apiFetch('/api/email/booking-confirmation', {\r\n              method: 'POST',\r\n              body: JSON.stringify({ booking: payload, userEmail: user.email }),\r\n            });\r\n          } catch (emailErr) {\r\n            console.warn('Email not sent:', emailErr.message);\r\n          }\r\n\r\n          toast.success('Booking successful!');\r\n          window.location.href = `/my-bookings/${bookingId}`;\r\n        } catch (err) {\r\n          console.error('Payment handler error:', err);\r\n          toast.error('Something went wrong during booking.');\r\n        } finally {\r\n          setLoading?.(false);\r\n        }\r\n      },\r\n      prefill: {\r\n        name: user.name || 'Guest',\r\n        email: user.email || 'guest@example.com',\r\n        contact: user.contact || '9999999999',\r\n      },\r\n      theme: { color: '#F37254' },\r\n    };\r\n\r\n    new window.Razorpay(options).open();\r\n  } catch (err) {\r\n    console.error('Error initiating Razorpay:', err);\r\n    toast.error('Unable to initiate payment. Please try again.');\r\n    setLoading?.(false);\r\n  }\r\n};\r\n\r\nexport default handleRazorpayPayment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}