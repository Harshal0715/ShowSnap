{"ast":null,"code":"var _s = $RefreshSig$();\n// razorpayCheckout.js\nimport toast from 'react-hot-toast';\nimport { useNavigate } from 'react-router-dom'; // üÜï Import useNavigate\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst RAZORPAY_KEY = process.env.REACT_APP_RAZORPAY_KEY || 'rzp_test_RIn3HX6YPDL3Nf';\n\n// Helper for API calls with token\nconst apiFetch = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const res = await fetch(`${API_URL}${endpoint}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n      ...options.headers\n    },\n    ...options\n  });\n  return res.json();\n};\nconst handleRazorpayPayment = async (payload, setLoading) => {\n  _s();\n  var _payload$seats, _payload$theater, _payload$theater2;\n  // Removed setSuccess\n  const navigate = useNavigate(); // üÜï Get navigate hook\n\n  const token = localStorage.getItem('token');\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (!token || !user) {\n    toast.error('User not authenticated. Please log in.');\n    return;\n  }\n\n  // ‚úÖ Validate all booking data at once\n  if (!payload || !payload.amount || payload.amount <= 0 || !payload.movieId || !payload.userId || !((_payload$seats = payload.seats) !== null && _payload$seats !== void 0 && _payload$seats.length) || !((_payload$theater = payload.theater) !== null && _payload$theater !== void 0 && _payload$theater.name) || !((_payload$theater2 = payload.theater) !== null && _payload$theater2 !== void 0 && _payload$theater2.location) || !payload.showtimeDate) {\n    toast.error('Incomplete booking details. Please select showtime and seats.');\n    return;\n  }\n  const formattedDate = new Date(payload.showtimeDate).toISOString();\n  try {\n    setLoading === null || setLoading === void 0 ? void 0 : setLoading(true);\n\n    // 1Ô∏è‚É£ Create Razorpay order\n    const {\n      orderId,\n      error: orderError\n    } = await apiFetch('/api/payments/create-order', {\n      method: 'POST',\n      body: JSON.stringify({\n        amount: payload.amount\n      })\n    });\n    if (orderError || !orderId) {\n      toast.error('Failed to create payment order.');\n      setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n      return;\n    }\n    if (!window.Razorpay) {\n      toast.error('Razorpay SDK not loaded. Please refresh.');\n      setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n      return;\n    }\n\n    // 2Ô∏è‚É£ Razorpay payment options\n    const options = {\n      key: RAZORPAY_KEY,\n      amount: payload.amount,\n      currency: 'INR',\n      name: 'ShowSnap',\n      description: 'Movie Ticket Booking',\n      order_id: orderId,\n      handler: async response => {\n        try {\n          const {\n            razorpay_order_id,\n            razorpay_payment_id,\n            razorpay_signature\n          } = response;\n          if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\n            toast.error('Incomplete payment response.');\n            return;\n          }\n\n          // 3Ô∏è‚É£ Verify payment & create booking on server\n          const verifyRes = await apiFetch('/api/payments/verify', {\n            method: 'POST',\n            body: JSON.stringify({\n              razorpay_order_id,\n              razorpay_payment_id,\n              razorpay_signature,\n              movieId: payload.movieId,\n              userId: payload.userId,\n              seats: payload.seats,\n              theater: payload.theater,\n              showtimeDate: formattedDate\n            })\n          });\n          if (!verifyRes.success) {\n            toast.error(verifyRes.error || 'Payment verification failed.');\n            return;\n          }\n\n          // ‚úÖ Success!\n          toast.success('Booking successful!');\n          navigate(`/my-bookings/${verifyRes.bookingId}`); // ‚úÖ Correctly use navigate\n        } catch (err) {\n          console.error('Payment handler error:', err);\n          toast.error('Something went wrong during booking.');\n        } finally {\n          setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n        }\n      },\n      prefill: {\n        name: user.name || 'Guest',\n        email: user.email || 'guest@example.com',\n        contact: user.contact || '9999999999'\n      },\n      theme: {\n        color: '#F37254'\n      }\n    };\n    new window.Razorpay(options).open();\n  } catch (err) {\n    console.error('Error initiating Razorpay:', err);\n    toast.error('Unable to initiate payment. Please try again.');\n    setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n  }\n};\n_s(handleRazorpayPayment, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\nexport default handleRazorpayPayment;","map":{"version":3,"names":["toast","useNavigate","API_URL","process","env","REACT_APP_API_URL","RAZORPAY_KEY","REACT_APP_RAZORPAY_KEY","apiFetch","endpoint","options","token","localStorage","getItem","res","fetch","headers","Authorization","json","handleRazorpayPayment","payload","setLoading","_s","_payload$seats","_payload$theater","_payload$theater2","navigate","user","JSON","parse","error","amount","movieId","userId","seats","length","theater","name","location","showtimeDate","formattedDate","Date","toISOString","orderId","orderError","method","body","stringify","window","Razorpay","key","currency","description","order_id","handler","response","razorpay_order_id","razorpay_payment_id","razorpay_signature","verifyRes","success","bookingId","err","console","prefill","email","contact","theme","color","open"],"sources":["C:/Users/Harshal/Desktop/showsnap/frontend/src/components/RazorpayCheckout.js"],"sourcesContent":["// razorpayCheckout.js\r\nimport toast from 'react-hot-toast';\r\nimport { useNavigate } from 'react-router-dom'; // üÜï Import useNavigate\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\nconst RAZORPAY_KEY = process.env.REACT_APP_RAZORPAY_KEY || 'rzp_test_RIn3HX6YPDL3Nf';\r\n\r\n// Helper for API calls with token\r\nconst apiFetch = async (endpoint, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n  const res = await fetch(`${API_URL}${endpoint}`, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  });\r\n  return res.json();\r\n};\r\n\r\nconst handleRazorpayPayment = async (payload, setLoading) => { // Removed setSuccess\r\n  const navigate = useNavigate(); // üÜï Get navigate hook\r\n\r\n  const token = localStorage.getItem('token');\r\n  const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n  if (!token || !user) {\r\n    toast.error('User not authenticated. Please log in.');\r\n    return;\r\n  }\r\n\r\n  // ‚úÖ Validate all booking data at once\r\n  if (\r\n    !payload ||\r\n    !payload.amount ||\r\n    payload.amount <= 0 ||\r\n    !payload.movieId ||\r\n    !payload.userId ||\r\n    !payload.seats?.length ||\r\n    !payload.theater?.name ||\r\n    !payload.theater?.location ||\r\n    !payload.showtimeDate\r\n  ) {\r\n    toast.error('Incomplete booking details. Please select showtime and seats.');\r\n    return;\r\n  }\r\n\r\n  const formattedDate = new Date(payload.showtimeDate).toISOString();\r\n\r\n  try {\r\n    setLoading?.(true);\r\n\r\n    // 1Ô∏è‚É£ Create Razorpay order\r\n    const { orderId, error: orderError } = await apiFetch('/api/payments/create-order', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ amount: payload.amount }),\r\n    });\r\n\r\n    if (orderError || !orderId) {\r\n      toast.error('Failed to create payment order.');\r\n      setLoading?.(false);\r\n      return;\r\n    }\r\n\r\n    if (!window.Razorpay) {\r\n      toast.error('Razorpay SDK not loaded. Please refresh.');\r\n      setLoading?.(false);\r\n      return;\r\n    }\r\n\r\n    // 2Ô∏è‚É£ Razorpay payment options\r\n    const options = {\r\n      key: RAZORPAY_KEY,\r\n      amount: payload.amount,\r\n      currency: 'INR',\r\n      name: 'ShowSnap',\r\n      description: 'Movie Ticket Booking',\r\n      order_id: orderId,\r\n      handler: async (response) => {\r\n        try {\r\n          const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;\r\n          if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\r\n            toast.error('Incomplete payment response.');\r\n            return;\r\n          }\r\n\r\n          // 3Ô∏è‚É£ Verify payment & create booking on server\r\n          const verifyRes = await apiFetch('/api/payments/verify', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              razorpay_order_id,\r\n              razorpay_payment_id,\r\n              razorpay_signature,\r\n              movieId: payload.movieId,\r\n              userId: payload.userId,\r\n              seats: payload.seats,\r\n              theater: payload.theater,\r\n              showtimeDate: formattedDate,\r\n            }),\r\n          });\r\n\r\n          if (!verifyRes.success) {\r\n            toast.error(verifyRes.error || 'Payment verification failed.');\r\n            return;\r\n          }\r\n\r\n          // ‚úÖ Success!\r\n          toast.success('Booking successful!');\r\n          navigate(`/my-bookings/${verifyRes.bookingId}`); // ‚úÖ Correctly use navigate\r\n        } catch (err) {\r\n          console.error('Payment handler error:', err);\r\n          toast.error('Something went wrong during booking.');\r\n        } finally {\r\n          setLoading?.(false);\r\n        }\r\n      },\r\n      prefill: {\r\n        name: user.name || 'Guest',\r\n        email: user.email || 'guest@example.com',\r\n        contact: user.contact || '9999999999',\r\n      },\r\n      theme: { color: '#F37254' },\r\n    };\r\n\r\n    new window.Razorpay(options).open();\r\n  } catch (err) {\r\n    console.error('Error initiating Razorpay:', err);\r\n    toast.error('Unable to initiate payment. Please try again.');\r\n    setLoading?.(false);\r\n  }\r\n};\r\n\r\nexport default handleRazorpayPayment;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}