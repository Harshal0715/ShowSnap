{"ast":null,"code":"import toast from 'react-hot-toast';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst RAZORPAY_KEY = process.env.REACT_APP_RAZORPAY_KEY || 'rzp_test_RIn3HX6YPDL3Nf';\n\n// 🔧 Unified fetch helper with token + error handling\nconst apiFetch = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const res = await fetch(`${API_URL}${endpoint}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n      ...options.headers\n    },\n    ...options\n  });\n  let data = {};\n  try {\n    data = await res.json();\n  } catch {\n    toast.error('Server returned invalid response.');\n  }\n  if (!res.ok) {\n    throw new Error(data.error || `API error: ${res.status}`);\n  }\n  return data;\n};\n\n// 💳 Razorpay payment handler\nconst handleRazorpayPayment = async (payload, setLoading, navigate) => {\n  var _payload$seats, _payload$theater, _payload$theater2;\n  const token = localStorage.getItem('token');\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (!token || !user) {\n    toast.error('User not authenticated. Please log in.');\n    return;\n  }\n\n  // ✅ Validate payload\n  const isValidPayload = payload && payload.amount > 0 && payload.movieId && ((_payload$seats = payload.seats) === null || _payload$seats === void 0 ? void 0 : _payload$seats.length) && ((_payload$theater = payload.theater) === null || _payload$theater === void 0 ? void 0 : _payload$theater.name) && ((_payload$theater2 = payload.theater) === null || _payload$theater2 === void 0 ? void 0 : _payload$theater2.location) && payload.showtimeDate;\n  if (!isValidPayload) {\n    toast.error('Incomplete booking details. Please select showtime and seats.');\n    return;\n  }\n  const formattedDate = new Date(payload.showtimeDate).toISOString();\n  try {\n    setLoading === null || setLoading === void 0 ? void 0 : setLoading(true);\n    console.log('🔍 Booking Payload:', payload);\n\n    // 🧾 Step 1: Create Razorpay order\n    const orderResponse = await apiFetch('/api/payments/create-order', {\n      method: 'POST',\n      body: JSON.stringify({\n        amount: payload.amount\n      })\n    });\n    const orderId = orderResponse.orderId || orderResponse.id;\n    if (!orderId) {\n      toast.error('Failed to create payment order.');\n      setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n      return;\n    }\n\n    // 🧠 Step 2: Ensure Razorpay SDK is loaded\n    if (!window.Razorpay) {\n      toast.error('Razorpay SDK not loaded. Please refresh.');\n      setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n      return;\n    }\n\n    // 🛒 Step 3: Configure Razorpay checkout\n    const options = {\n      key: RAZORPAY_KEY,\n      amount: payload.amount,\n      currency: 'INR',\n      name: 'ShowSnap',\n      description: 'Movie Ticket Booking',\n      order_id: orderId,\n      handler: async response => {\n        try {\n          const {\n            razorpay_order_id,\n            razorpay_payment_id,\n            razorpay_signature\n          } = response;\n          if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\n            toast.error('Incomplete payment response.');\n            return;\n          }\n\n          // ✅ Step 4: Verify payment and create booking\n          const verifyRes = await apiFetch('/api/payments/verify', {\n            method: 'POST',\n            body: JSON.stringify({\n              razorpay_order_id,\n              razorpay_payment_id,\n              razorpay_signature,\n              movieId: payload.movieId,\n              seats: payload.seats,\n              theater: {\n                name: payload.theater.name,\n                location: payload.theater.location\n              },\n              showtimeDate: formattedDate,\n              amount: payload.amount\n            })\n          });\n          console.log('✅ Verification Response:', verifyRes);\n          if (!verifyRes.success) {\n            toast.error(verifyRes.error || 'Payment verification failed.');\n            return;\n          }\n          toast.success('🎉 Booking successful!');\n          if (verifyRes.bookingId) {\n            navigate(`/my-bookings/${verifyRes.bookingId}`);\n          } else {\n            toast.error('Booking ID missing in response.');\n          }\n        } catch (err) {\n          console.error('Payment handler error:', err);\n          toast.error('Something went wrong during booking.');\n        } finally {\n          setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n        }\n      },\n      prefill: {\n        name: user.name || 'Guest',\n        email: user.email || 'guest@example.com',\n        contact: /^\\d{10}$/.test(user.contact) ? user.contact : '9999999999'\n      },\n      theme: {\n        color: '#F37254'\n      }\n    };\n\n    // 🧾 Step 5: Open Razorpay checkout\n    new window.Razorpay(options).open();\n  } catch (err) {\n    console.error('Error initiating Razorpay:', err);\n    toast.error(err.message || 'Unable to initiate payment. Please try again.');\n    setLoading === null || setLoading === void 0 ? void 0 : setLoading(false);\n  }\n};\nexport default handleRazorpayPayment;","map":{"version":3,"names":["toast","API_URL","process","env","REACT_APP_API_URL","RAZORPAY_KEY","REACT_APP_RAZORPAY_KEY","apiFetch","endpoint","options","token","localStorage","getItem","res","fetch","headers","Authorization","data","json","error","ok","Error","status","handleRazorpayPayment","payload","setLoading","navigate","_payload$seats","_payload$theater","_payload$theater2","user","JSON","parse","isValidPayload","amount","movieId","seats","length","theater","name","location","showtimeDate","formattedDate","Date","toISOString","console","log","orderResponse","method","body","stringify","orderId","id","window","Razorpay","key","currency","description","order_id","handler","response","razorpay_order_id","razorpay_payment_id","razorpay_signature","verifyRes","success","bookingId","err","prefill","email","contact","test","theme","color","open","message"],"sources":["C:/Users/Harshal/Desktop/showsnap/frontend/src/components/RazorpayCheckout.js"],"sourcesContent":["import toast from 'react-hot-toast';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\nconst RAZORPAY_KEY = process.env.REACT_APP_RAZORPAY_KEY || 'rzp_test_RIn3HX6YPDL3Nf';\r\n\r\n// 🔧 Unified fetch helper with token + error handling\r\nconst apiFetch = async (endpoint, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n\r\n  const res = await fetch(`${API_URL}${endpoint}`, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  });\r\n\r\n  let data = {};\r\n  try {\r\n    data = await res.json();\r\n  } catch {\r\n    toast.error('Server returned invalid response.');\r\n  }\r\n\r\n  if (!res.ok) {\r\n    throw new Error(data.error || `API error: ${res.status}`);\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n// 💳 Razorpay payment handler\r\nconst handleRazorpayPayment = async (payload, setLoading, navigate) => {\r\n  const token = localStorage.getItem('token');\r\n  const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n  if (!token || !user) {\r\n    toast.error('User not authenticated. Please log in.');\r\n    return;\r\n  }\r\n\r\n  // ✅ Validate payload\r\n  const isValidPayload =\r\n    payload &&\r\n    payload.amount > 0 &&\r\n    payload.movieId &&\r\n    payload.seats?.length &&\r\n    payload.theater?.name &&\r\n    payload.theater?.location &&\r\n    payload.showtimeDate;\r\n\r\n  if (!isValidPayload) {\r\n    toast.error('Incomplete booking details. Please select showtime and seats.');\r\n    return;\r\n  }\r\n\r\n  const formattedDate = new Date(payload.showtimeDate).toISOString();\r\n\r\n  try {\r\n    setLoading?.(true);\r\n    console.log('🔍 Booking Payload:', payload);\r\n\r\n    // 🧾 Step 1: Create Razorpay order\r\n    const orderResponse = await apiFetch('/api/payments/create-order', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ amount: payload.amount }),\r\n    });\r\n\r\n    const orderId = orderResponse.orderId || orderResponse.id;\r\n    if (!orderId) {\r\n      toast.error('Failed to create payment order.');\r\n      setLoading?.(false);\r\n      return;\r\n    }\r\n\r\n    // 🧠 Step 2: Ensure Razorpay SDK is loaded\r\n    if (!window.Razorpay) {\r\n      toast.error('Razorpay SDK not loaded. Please refresh.');\r\n      setLoading?.(false);\r\n      return;\r\n    }\r\n\r\n    // 🛒 Step 3: Configure Razorpay checkout\r\n    const options = {\r\n      key: RAZORPAY_KEY,\r\n      amount: payload.amount,\r\n      currency: 'INR',\r\n      name: 'ShowSnap',\r\n      description: 'Movie Ticket Booking',\r\n      order_id: orderId,\r\n      handler: async (response) => {\r\n        try {\r\n          const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;\r\n\r\n          if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\r\n            toast.error('Incomplete payment response.');\r\n            return;\r\n          }\r\n\r\n          // ✅ Step 4: Verify payment and create booking\r\n          const verifyRes = await apiFetch('/api/payments/verify', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              razorpay_order_id,\r\n              razorpay_payment_id,\r\n              razorpay_signature,\r\n              movieId: payload.movieId,\r\n              seats: payload.seats,\r\n              theater: {\r\n                name: payload.theater.name,\r\n                location: payload.theater.location,\r\n              },\r\n              showtimeDate: formattedDate,\r\n              amount: payload.amount,\r\n            }),\r\n          });\r\n\r\n          console.log('✅ Verification Response:', verifyRes);\r\n\r\n          if (!verifyRes.success) {\r\n            toast.error(verifyRes.error || 'Payment verification failed.');\r\n            return;\r\n          }\r\n\r\n          toast.success('🎉 Booking successful!');\r\n          if (verifyRes.bookingId) {\r\n            navigate(`/my-bookings/${verifyRes.bookingId}`);\r\n          } else {\r\n            toast.error('Booking ID missing in response.');\r\n          }\r\n        } catch (err) {\r\n          console.error('Payment handler error:', err);\r\n          toast.error('Something went wrong during booking.');\r\n        } finally {\r\n          setLoading?.(false);\r\n        }\r\n      },\r\n      prefill: {\r\n        name: user.name || 'Guest',\r\n        email: user.email || 'guest@example.com',\r\n        contact: /^\\d{10}$/.test(user.contact) ? user.contact : '9999999999',\r\n      },\r\n      theme: { color: '#F37254' },\r\n    };\r\n\r\n    // 🧾 Step 5: Open Razorpay checkout\r\n    new window.Razorpay(options).open();\r\n  } catch (err) {\r\n    console.error('Error initiating Razorpay:', err);\r\n    toast.error(err.message || 'Unable to initiate payment. Please try again.');\r\n    setLoading?.(false);\r\n  }\r\n};\r\n\r\nexport default handleRazorpayPayment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}