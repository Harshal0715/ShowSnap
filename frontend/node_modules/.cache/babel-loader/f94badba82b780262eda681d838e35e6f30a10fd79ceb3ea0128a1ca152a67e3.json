{"ast":null,"code":"import axios from 'axios';\n\n// 🌐 Create Axios instance\nconst API = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\n  timeout: 10000 // 10s timeout\n});\n\n// 🔑 Request interceptor: inject token if available\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// ⚠️ Response interceptor: global error logging\nAPI.interceptors.response.use(response => response, error => {\n  var _error$response;\n  // 💡 A cleaner approach: let the component handle the specific toast/alert\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// ---\n// 🎬 Movie APIs\n// ---\nexport const fetchMovies = () => API.get('/movies');\nexport const getMovieById = id => API.get(`/movies/${id}`);\nexport const createMovie = movieData => API.post('/admin/movies', movieData);\nexport const updateMovie = (id, data) => API.put(`/admin/movies/${id}`, data);\nexport const deleteMovie = movieId => API.delete(`/admin/movies/${movieId}`);\n// ℹ️ Note: Your backend doesn't have a '/movies/:id/cast' endpoint.\n// If you need this, you should create it in the backend's movieController.js.\n\n// ---\n// 👤 User Auth APIs\n// ---\nexport const loginUser = data => API.post('/users/login', data);\nexport const signupUser = userData => API.post('/users/register', userData);\n\n// ---\n// 🎟️ Booking APIs\n// ---\n// ❌ Redundancy removed: The payment verification endpoint now handles booking creation.\n// export const bookSeats = (data) => API.post('/bookings', data);\n\n// ✅ Correct function for a logged-in user to get their own bookings securely\n// This function calls the endpoint that gets user ID from the JWT, not the URL.\nexport const getAllUserBookings = () => API.get('/bookings');\n\n// ❌ Insecure call removed: Your previous code called an endpoint that\n// could expose other users' booking history. This is a critical security fix.\n// export const getUserBookings = (userId) => API.get(`/bookings/user/${userId}`);\n\n// ✅ Corrected method: The route for cancelling a booking uses PATCH, not PUT.\nexport const cancelBooking = bookingId => API.patch(`/bookings/${bookingId}/cancel`);\n\n// ---\n// 🛠️ Admin APIs\n// ---\nexport const getAllBookings = () => API.get('/admin/bookings');\nexport const getAdminStats = () => API.get('/admin/dashboard');\nexport const getAllUsers = () => API.get('/admin/users');\n\n// ---\n// 🏢 Theater APIs\n// ---\nexport const fetchTheaters = () => API.get('/theaters');\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","process","env","REACT_APP_API_BASE_URL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","_error$response","console","data","message","Promise","reject","fetchMovies","get","getMovieById","id","createMovie","movieData","post","updateMovie","put","deleteMovie","movieId","delete","loginUser","signupUser","userData","getAllUserBookings","cancelBooking","bookingId","patch","getAllBookings","getAdminStats","getAllUsers","fetchTheaters"],"sources":["C:/Users/Harshal/Desktop/showsnap/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// 🌐 Create Axios instance\r\nconst API = axios.create({\r\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\r\n  timeout: 10000, // 10s timeout\r\n});\r\n\r\n// 🔑 Request interceptor: inject token if available\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// ⚠️ Response interceptor: global error logging\r\nAPI.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    // 💡 A cleaner approach: let the component handle the specific toast/alert\r\n    console.error('API Error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// ---\r\n// 🎬 Movie APIs\r\n// ---\r\nexport const fetchMovies = () => API.get('/movies');\r\nexport const getMovieById = (id) => API.get(`/movies/${id}`);\r\nexport const createMovie = (movieData) => API.post('/admin/movies', movieData);\r\nexport const updateMovie = (id, data) => API.put(`/admin/movies/${id}`, data);\r\nexport const deleteMovie = (movieId) => API.delete(`/admin/movies/${movieId}`);\r\n// ℹ️ Note: Your backend doesn't have a '/movies/:id/cast' endpoint.\r\n// If you need this, you should create it in the backend's movieController.js.\r\n\r\n// ---\r\n// 👤 User Auth APIs\r\n// ---\r\nexport const loginUser = (data) => API.post('/users/login', data);\r\nexport const signupUser = (userData) => API.post('/users/register', userData);\r\n\r\n// ---\r\n// 🎟️ Booking APIs\r\n// ---\r\n// ❌ Redundancy removed: The payment verification endpoint now handles booking creation.\r\n// export const bookSeats = (data) => API.post('/bookings', data);\r\n\r\n// ✅ Correct function for a logged-in user to get their own bookings securely\r\n// This function calls the endpoint that gets user ID from the JWT, not the URL.\r\nexport const getAllUserBookings = () => API.get('/bookings');\r\n\r\n// ❌ Insecure call removed: Your previous code called an endpoint that\r\n// could expose other users' booking history. This is a critical security fix.\r\n// export const getUserBookings = (userId) => API.get(`/bookings/user/${userId}`);\r\n\r\n// ✅ Corrected method: The route for cancelling a booking uses PATCH, not PUT.\r\nexport const cancelBooking = (bookingId) => API.patch(`/bookings/${bookingId}/cancel`);\r\n\r\n// ---\r\n// 🛠️ Admin APIs\r\n// ---\r\nexport const getAllBookings = () => API.get('/admin/bookings');\r\nexport const getAdminStats = () => API.get('/admin/dashboard');\r\nexport const getAllUsers = () => API.get('/admin/users');\r\n\r\n// ---\r\n// 🏢 Theater APIs\r\n// ---\r\nexport const fetchTheaters = () => API.get('/theaters');\r\n\r\nexport default API;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,2BAA2B;EAC1EC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAV,GAAG,CAACO,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC3BO,QAAQ,IAAIA,QAAQ,EACpBC,KAAK,IAAI;EAAA,IAAAC,eAAA;EACP;EACAC,OAAO,CAACF,KAAK,CAAC,YAAY,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBE,IAAI,KAAIH,KAAK,CAACI,OAAO,CAAC;EAClE,OAAOC,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMO,WAAW,GAAGA,CAAA,KAAMxB,GAAG,CAACyB,GAAG,CAAC,SAAS,CAAC;AACnD,OAAO,MAAMC,YAAY,GAAIC,EAAE,IAAK3B,GAAG,CAACyB,GAAG,CAAC,WAAWE,EAAE,EAAE,CAAC;AAC5D,OAAO,MAAMC,WAAW,GAAIC,SAAS,IAAK7B,GAAG,CAAC8B,IAAI,CAAC,eAAe,EAAED,SAAS,CAAC;AAC9E,OAAO,MAAME,WAAW,GAAGA,CAACJ,EAAE,EAAEP,IAAI,KAAKpB,GAAG,CAACgC,GAAG,CAAC,iBAAiBL,EAAE,EAAE,EAAEP,IAAI,CAAC;AAC7E,OAAO,MAAMa,WAAW,GAAIC,OAAO,IAAKlC,GAAG,CAACmC,MAAM,CAAC,iBAAiBD,OAAO,EAAE,CAAC;AAC9E;AACA;;AAEA;AACA;AACA;AACA,OAAO,MAAME,SAAS,GAAIhB,IAAI,IAAKpB,GAAG,CAAC8B,IAAI,CAAC,cAAc,EAAEV,IAAI,CAAC;AACjE,OAAO,MAAMiB,UAAU,GAAIC,QAAQ,IAAKtC,GAAG,CAAC8B,IAAI,CAAC,iBAAiB,EAAEQ,QAAQ,CAAC;;AAE7E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAMvC,GAAG,CAACyB,GAAG,CAAC,WAAW,CAAC;;AAE5D;AACA;AACA;;AAEA;AACA,OAAO,MAAMe,aAAa,GAAIC,SAAS,IAAKzC,GAAG,CAAC0C,KAAK,CAAC,aAAaD,SAAS,SAAS,CAAC;;AAEtF;AACA;AACA;AACA,OAAO,MAAME,cAAc,GAAGA,CAAA,KAAM3C,GAAG,CAACyB,GAAG,CAAC,iBAAiB,CAAC;AAC9D,OAAO,MAAMmB,aAAa,GAAGA,CAAA,KAAM5C,GAAG,CAACyB,GAAG,CAAC,kBAAkB,CAAC;AAC9D,OAAO,MAAMoB,WAAW,GAAGA,CAAA,KAAM7C,GAAG,CAACyB,GAAG,CAAC,cAAc,CAAC;;AAExD;AACA;AACA;AACA,OAAO,MAAMqB,aAAa,GAAGA,CAAA,KAAM9C,GAAG,CAACyB,GAAG,CAAC,WAAW,CAAC;AAEvD,eAAezB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}