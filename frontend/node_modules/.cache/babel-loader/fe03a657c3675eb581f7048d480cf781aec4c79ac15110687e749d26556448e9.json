{"ast":null,"code":"import { bookSeats } from '../services/api';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst handleRazorpayPayment = async payload => {\n  try {\n    var _payload$seats, _payload$theater, _payload$theater2;\n    const token = localStorage.getItem('token');\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!token || !user) {\n      alert('User not authenticated. Please log in again.');\n      return;\n    }\n    if (!payload || !payload.amount || payload.amount <= 0 || !payload.movieId || !payload.userId || !((_payload$seats = payload.seats) !== null && _payload$seats !== void 0 && _payload$seats.length) || !((_payload$theater = payload.theater) !== null && _payload$theater !== void 0 && _payload$theater.name) || !((_payload$theater2 = payload.theater) !== null && _payload$theater2 !== void 0 && _payload$theater2.location) || !payload.showtimeDate) {\n      alert('Incomplete booking details. Please select showtime and seats.');\n      return;\n    }\n    const formattedDate = new Date(payload.showtimeDate).toISOString();\n\n    // 1️⃣ Create Razorpay order\n    const orderRes = await fetch(`${API_URL}/api/payments/create-order`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        amount: payload.amount\n      })\n    });\n    const {\n      orderId\n    } = await orderRes.json();\n    if (!orderId) {\n      alert('Failed to create payment order.');\n      return;\n    }\n    if (!window.Razorpay) {\n      alert('Razorpay SDK not loaded. Please refresh the page.');\n      return;\n    }\n\n    // 2️⃣ Razorpay payment options\n    const options = {\n      key: process.env.REACT_APP_RAZORPAY_KEY || 'rzp_test_RIn3HX6YPDL3Nf',\n      amount: payload.amount,\n      currency: 'INR',\n      name: 'ShowSnap',\n      description: 'Movie Ticket Booking',\n      order_id: orderId,\n      handler: async response => {\n        try {\n          var _bookingRes$data;\n          const {\n            razorpay_order_id,\n            razorpay_payment_id,\n            razorpay_signature\n          } = response;\n          if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\n            alert('Incomplete payment response.');\n            return;\n          }\n\n          // 3️⃣ Verify payment on server\n          const verifyRes = await fetch(`${API_URL}/api/payments/verify`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify({\n              razorpay_order_id,\n              razorpay_payment_id,\n              razorpay_signature,\n              movieId: payload.movieId,\n              userId: payload.userId,\n              seats: payload.seats,\n              theater: payload.theater,\n              showtimeDate: formattedDate\n            })\n          });\n          const result = await verifyRes.json();\n          if (!verifyRes.ok || !result.success) {\n            alert(result.error || 'Payment verification failed.');\n            return;\n          }\n\n          // 4️⃣ Book seats in DB\n          const bookingRes = await bookSeats(payload, token);\n          const bookingId = bookingRes === null || bookingRes === void 0 ? void 0 : (_bookingRes$data = bookingRes.data) === null || _bookingRes$data === void 0 ? void 0 : _bookingRes$data._id;\n          if (!bookingId) {\n            alert('Booking failed. No booking ID returned.');\n            return;\n          }\n\n          // 5️⃣ Send confirmation email\n          try {\n            await fetch(`${API_URL}/api/email/booking-confirmation`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`\n              },\n              body: JSON.stringify({\n                booking: payload,\n                userEmail: user.email\n              })\n            });\n          } catch (emailErr) {\n            console.warn('Email not sent:', emailErr.message);\n          }\n\n          // ✅ Success redirect\n          window.location.href = `/my-bookings/${bookingId}`;\n        } catch (err) {\n          console.error('Payment handler error:', err);\n          alert(err.message || 'Something went wrong during booking.');\n        }\n      },\n      prefill: {\n        name: user.name || 'Guest',\n        email: user.email || 'guest@example.com',\n        contact: user.contact || '9999999999'\n      },\n      theme: {\n        color: '#F37254'\n      }\n    };\n    new window.Razorpay(options).open();\n  } catch (err) {\n    console.error('Error initiating Razorpay:', err);\n    alert(err.message || 'Unable to initiate payment.');\n  }\n};\nexport default handleRazorpayPayment;","map":{"version":3,"names":["bookSeats","API_URL","process","env","REACT_APP_API_URL","handleRazorpayPayment","payload","_payload$seats","_payload$theater","_payload$theater2","token","localStorage","getItem","user","JSON","parse","alert","amount","movieId","userId","seats","length","theater","name","location","showtimeDate","formattedDate","Date","toISOString","orderRes","fetch","method","headers","Authorization","body","stringify","orderId","json","window","Razorpay","options","key","REACT_APP_RAZORPAY_KEY","currency","description","order_id","handler","response","_bookingRes$data","razorpay_order_id","razorpay_payment_id","razorpay_signature","verifyRes","result","ok","success","error","bookingRes","bookingId","data","_id","booking","userEmail","email","emailErr","console","warn","message","href","err","prefill","contact","theme","color","open"],"sources":["C:/Users/Harshal/Desktop/showsnap/frontend/src/components/RazorpayCheckout.js"],"sourcesContent":["import { bookSeats } from '../services/api';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nconst handleRazorpayPayment = async (payload) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    if (!token || !user) {\r\n      alert('User not authenticated. Please log in again.');\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !payload ||\r\n      !payload.amount ||\r\n      payload.amount <= 0 ||\r\n      !payload.movieId ||\r\n      !payload.userId ||\r\n      !payload.seats?.length ||\r\n      !payload.theater?.name ||\r\n      !payload.theater?.location ||\r\n      !payload.showtimeDate\r\n    ) {\r\n      alert('Incomplete booking details. Please select showtime and seats.');\r\n      return;\r\n    }\r\n\r\n    const formattedDate = new Date(payload.showtimeDate).toISOString();\r\n\r\n    // 1️⃣ Create Razorpay order\r\n    const orderRes = await fetch(`${API_URL}/api/payments/create-order`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({ amount: payload.amount })\r\n    });\r\n\r\n    const { orderId } = await orderRes.json();\r\n    if (!orderId) {\r\n      alert('Failed to create payment order.');\r\n      return;\r\n    }\r\n\r\n    if (!window.Razorpay) {\r\n      alert('Razorpay SDK not loaded. Please refresh the page.');\r\n      return;\r\n    }\r\n\r\n    // 2️⃣ Razorpay payment options\r\n    const options = {\r\n      key: process.env.REACT_APP_RAZORPAY_KEY || 'rzp_test_RIn3HX6YPDL3Nf',\r\n      amount: payload.amount,\r\n      currency: 'INR',\r\n      name: 'ShowSnap',\r\n      description: 'Movie Ticket Booking',\r\n      order_id: orderId,\r\n      handler: async (response) => {\r\n        try {\r\n          const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;\r\n          if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\r\n            alert('Incomplete payment response.');\r\n            return;\r\n          }\r\n\r\n          // 3️⃣ Verify payment on server\r\n          const verifyRes = await fetch(`${API_URL}/api/payments/verify`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({\r\n              razorpay_order_id,\r\n              razorpay_payment_id,\r\n              razorpay_signature,\r\n              movieId: payload.movieId,\r\n              userId: payload.userId,\r\n              seats: payload.seats,\r\n              theater: payload.theater,\r\n              showtimeDate: formattedDate\r\n            })\r\n          });\r\n\r\n          const result = await verifyRes.json();\r\n          if (!verifyRes.ok || !result.success) {\r\n            alert(result.error || 'Payment verification failed.');\r\n            return;\r\n          }\r\n\r\n          // 4️⃣ Book seats in DB\r\n          const bookingRes = await bookSeats(payload, token);\r\n          const bookingId = bookingRes?.data?._id;\r\n          if (!bookingId) {\r\n            alert('Booking failed. No booking ID returned.');\r\n            return;\r\n          }\r\n\r\n          // 5️⃣ Send confirmation email\r\n          try {\r\n            await fetch(`${API_URL}/api/email/booking-confirmation`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`\r\n              },\r\n              body: JSON.stringify({\r\n                booking: payload,\r\n                userEmail: user.email\r\n              })\r\n            });\r\n          } catch (emailErr) {\r\n            console.warn('Email not sent:', emailErr.message);\r\n          }\r\n\r\n          // ✅ Success redirect\r\n          window.location.href = `/my-bookings/${bookingId}`;\r\n        } catch (err) {\r\n          console.error('Payment handler error:', err);\r\n          alert(err.message || 'Something went wrong during booking.');\r\n        }\r\n      },\r\n      prefill: {\r\n        name: user.name || 'Guest',\r\n        email: user.email || 'guest@example.com',\r\n        contact: user.contact || '9999999999'\r\n      },\r\n      theme: { color: '#F37254' }\r\n    };\r\n\r\n    new window.Razorpay(options).open();\r\n  } catch (err) {\r\n    console.error('Error initiating Razorpay:', err);\r\n    alert(err.message || 'Unable to initiate payment.');\r\n  }\r\n};\r\n\r\nexport default handleRazorpayPayment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}